% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cont_add_data.R
\name{elic_cont_add_data}
\alias{elic_cont_add_data}
\title{Add data}
\usage{
elic_cont_add_data(
  x,
  data_source,
  round,
  ...,
  sep = ",",
  sheet = 1,
  overwrite = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{x}{an object of class \link{elic_cont}.}

\item{data_source}{either a \code{\link[base:data.frame]{data.frame}} or
\code{\link[tibble:tibble]{tibble}}, a string with the path to a \emph{csv} or \emph{xlsx} file,
or anything accepted by the \link[googlesheets4:range_read]{read_sheet} function.}

\item{round}{integer indicating if the data belongs to the first or second
elicitation round.}

\item{...}{Unused arguments, included only for future extensions of the
function.}

\item{sep}{character used as field separator, used only when \code{data_source} is
a path to a \emph{csv} file.}

\item{sheet}{integer or character to select the sheet. The sheet can be
referenced by its position with a number or by its name with a string. Used
only when \code{data_source} is a path to a \emph{xlsx} file or when data are imported
from \emph{Google Sheets}.}

\item{overwrite}{logical, whether to overwrite existing data already added to
the \link{elic_cont} object.}

\item{verbose}{logical, if \code{TRUE} it prints informative messages.}
}
\value{
The provided object of class \link{elic_cont} updated with the data.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

\code{elic_cont_add_data()} adds data to an \link{elic_cont} object from different
sources.
}
\section{Data format}{


Data are expected to have the name of the expert always as first column. The
only exception is for data coming from \emph{Google Sheet} which can have an
additional column with a timestamp. This column is automatically removed
before the data are added to the \link{elic_cont} object (see "Data cleaning").
After the name there should be one or more blocks which follow the
specifications below:

\emph{One point elicitation}:
\itemize{
\item \code{var_best}: best estimate for the variable
}

\emph{Three points elicitation}:
\itemize{
\item \code{var_min}: minimum estimate for the variable
\item \code{var_max}: maximum estimate for the variable
\item \code{var_best}: best estimate for the variable
}

\emph{Four points elicitation}:
\itemize{
\item \code{var_min}: minimum estimate for the variable
\item \code{var_max}: maximum estimate for the variable
\item \code{var_best}: best estimate for the variable
\item \code{var_conf}: confidence for the estimate
}

The column with names is unique, the other columns are a block and can be
repeated for each variable.

Moreover, the name of the columns is not important, \code{elic_cont_add_data()}
will overwrite it according to the following convention:

\emph{varname}_\emph{suffix}

with \emph{suffix} being one of \emph{min}, \emph{max}, \emph{best}, or \emph{conf}. The information
to build the column names is taken from the metadata available in the
\link{elic_cont} object.

\code{var_conf}, given in percents, can be any number between 60 and 100. Any
value under 50 would imply that the accuracy of the estimates is only due to
chance).
}

\section{Data cleaning}{


When data are added to the \link{elic_cont} object, first names are standardised
by converting capital letters to lower case, and by removing any whitespaces
and punctuation. Then, data are anonymised by converting names to short sha1
hashes. In this way, sensible information collected during the elicitation
process never reaches the \link{elic_cont} object. For three and four points
elicitation processes, the order of the values is checked for each expert. If
it is not \emph{min-max-best}, the values are swaped accordingly and a informative
warn is raised.

If the data are imported from \emph{Google Sheets}, \code{elic_cont_add_data()}
performs additional data cleaning operations. This is relevant when data are
collected with Google Forms because, for example, there could be multiple
submission by the same expert or a different decimal separator could be used.
When data are collected with Google Form, a column with the date and time is
recorded. First, the function checks for multiple submissions and if present,
only the last submission is retained. Second, the function removes the column
with the timestamp. Then it checks for consistency of the decimal separator,
i.e. commas \emph{,} are replaced with periods \emph{.}. Finally, all columns but the
first one (which contains the names) are forced to numeric.
}

\examples{
# Create the elic_cont object for an elicitation process that estimates 3
# variables, the first for a one point estimation of a positive integer, the
# second for three points estimation of a negative real, and the last for a
# four point estimation of a probability
x <- cont_start(var_names = c("var1", "var2", "var3"),
                var_types = "ZNp",
                elic_types = "134",
                experts = 6)

# Add data for the first and second round from a data.frame. Notice that the
# two commands can be piped
my_elicit <- elic_cont_add_data(x, data_source = round_1, round = 1) |>
  elic_cont_add_data(data_source = round_2, round = 2)
my_elicit

# Add data for the first and second round from a csv file
files <- list.files(path = system.file("extdata", package = "elicitr"),
                    pattern = "round_",
                    full.names = TRUE)
my_elicit <- elic_cont_add_data(x, data_source = files[1], round = 1) |>
  elic_cont_add_data(data_source = files[2], round = 2)
my_elicit

# Add data for the first and second round from a xlsx file with two sheets
file <- list.files(path = system.file("extdata", package = "elicitr"),
                   pattern = "rounds",
                   full.names = TRUE)
# Using the sheet index
my_elicit <- elic_cont_add_data(x, data_source = file,
                                sheet = 1, round = 1) |>
  elic_cont_add_data(data_source = file, sheet = 2, round = 2)
my_elicit
# Using the sheet name
my_elicit <- elic_cont_add_data(x, data_source = file,
                           sheet = "Round 1", round = 1) |>
  elic_cont_add_data(data_source = file, sheet = "Round 2", round = 2)
my_elicit

\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Add data for the first and second round from Google Sheets
googlesheets4::gs4_deauth()
gs1 <- "12lGIPa-jJOh3fogUDaERmkf04pVpPu9i8SloL2jAdqc"
gs2 <- "1wImcfJYnC9a423jlxZiU_BFKXZpTZ7AIsZSxFtEsBQw"
my_elicit <- elic_cont_add_data(x, data_source = gs1, round = 1) |>
  elic_cont_add_data(data_source = gs2, round = 2)
my_elicit
\dontshow{\}) # examplesIf}
}
\seealso{
Other cont data helpers: 
\code{\link{cont_start}()},
\code{\link{elic_cont_get_data}()}
}
\author{
Sergio Vignali
}
\concept{cont data helpers}
